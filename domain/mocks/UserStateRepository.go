// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/sicozz/papyrus/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserStateRepository is an autogenerated mock type for the UserStateRepository type
type UserStateRepository struct {
	mock.Mock
}

type UserStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStateRepository) EXPECT() *UserStateRepository_Expecter {
	return &UserStateRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserStateRepository) GetAll(ctx context.Context) ([]domain.UserState, error) {
	ret := _m.Called(ctx)

	var r0 []domain.UserState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.UserState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.UserState); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStateRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserStateRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserStateRepository_Expecter) GetAll(ctx interface{}) *UserStateRepository_GetAll_Call {
	return &UserStateRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *UserStateRepository_GetAll_Call) Run(run func(ctx context.Context)) *UserStateRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserStateRepository_GetAll_Call) Return(_a0 []domain.UserState, _a1 error) *UserStateRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStateRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.UserState, error)) *UserStateRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *UserStateRepository) GetByCode(ctx context.Context, code int64) (domain.UserState, error) {
	ret := _m.Called(ctx, code)

	var r0 domain.UserState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.UserState, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.UserState); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(domain.UserState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStateRepository_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type UserStateRepository_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code int64
func (_e *UserStateRepository_Expecter) GetByCode(ctx interface{}, code interface{}) *UserStateRepository_GetByCode_Call {
	return &UserStateRepository_GetByCode_Call{Call: _e.mock.On("GetByCode", ctx, code)}
}

func (_c *UserStateRepository_GetByCode_Call) Run(run func(ctx context.Context, code int64)) *UserStateRepository_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserStateRepository_GetByCode_Call) Return(_a0 domain.UserState, _a1 error) *UserStateRepository_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStateRepository_GetByCode_Call) RunAndReturn(run func(context.Context, int64) (domain.UserState, error)) *UserStateRepository_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDescription provides a mock function with given fields: ctx, desc
func (_m *UserStateRepository) GetByDescription(ctx context.Context, desc string) (domain.UserState, error) {
	ret := _m.Called(ctx, desc)

	var r0 domain.UserState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.UserState, error)); ok {
		return rf(ctx, desc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.UserState); ok {
		r0 = rf(ctx, desc)
	} else {
		r0 = ret.Get(0).(domain.UserState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, desc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStateRepository_GetByDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDescription'
type UserStateRepository_GetByDescription_Call struct {
	*mock.Call
}

// GetByDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - desc string
func (_e *UserStateRepository_Expecter) GetByDescription(ctx interface{}, desc interface{}) *UserStateRepository_GetByDescription_Call {
	return &UserStateRepository_GetByDescription_Call{Call: _e.mock.On("GetByDescription", ctx, desc)}
}

func (_c *UserStateRepository_GetByDescription_Call) Run(run func(ctx context.Context, desc string)) *UserStateRepository_GetByDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserStateRepository_GetByDescription_Call) Return(_a0 domain.UserState, _a1 error) *UserStateRepository_GetByDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStateRepository_GetByDescription_Call) RunAndReturn(run func(context.Context, string) (domain.UserState, error)) *UserStateRepository_GetByDescription_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserStateRepository creates a new instance of UserStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStateRepository {
	mock := &UserStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
