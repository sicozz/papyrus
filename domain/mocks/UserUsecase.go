// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/sicozz/papyrus/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

type UserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecase) EXPECT() *UserUsecase_Expecter {
	return &UserUsecase_Expecter{mock: &_m.Mock}
}

// ChgPasswd provides a mock function with given fields: ctx, uuid, data
func (_m *UserUsecase) ChgPasswd(ctx context.Context, uuid string, data domain.ChgPasswd) domain.RequestErr {
	ret := _m.Called(ctx, uuid, data)

	var r0 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ChgPasswd) domain.RequestErr); ok {
		r0 = rf(ctx, uuid, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.RequestErr)
		}
	}

	return r0
}

// UserUsecase_ChgPasswd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChgPasswd'
type UserUsecase_ChgPasswd_Call struct {
	*mock.Call
}

// ChgPasswd is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - data domain.ChgPasswd
func (_e *UserUsecase_Expecter) ChgPasswd(ctx interface{}, uuid interface{}, data interface{}) *UserUsecase_ChgPasswd_Call {
	return &UserUsecase_ChgPasswd_Call{Call: _e.mock.On("ChgPasswd", ctx, uuid, data)}
}

func (_c *UserUsecase_ChgPasswd_Call) Run(run func(ctx context.Context, uuid string, data domain.ChgPasswd)) *UserUsecase_ChgPasswd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.ChgPasswd))
	})
	return _c
}

func (_c *UserUsecase_ChgPasswd_Call) Return(_a0 domain.RequestErr) *UserUsecase_ChgPasswd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_ChgPasswd_Call) RunAndReturn(run func(context.Context, string, domain.ChgPasswd) domain.RequestErr) *UserUsecase_ChgPasswd_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: c, uname
func (_m *UserUsecase) Delete(c context.Context, uname string) domain.RequestErr {
	ret := _m.Called(c, uname)

	var r0 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.RequestErr); ok {
		r0 = rf(c, uname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.RequestErr)
		}
	}

	return r0
}

// UserUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c context.Context
//   - uname string
func (_e *UserUsecase_Expecter) Delete(c interface{}, uname interface{}) *UserUsecase_Delete_Call {
	return &UserUsecase_Delete_Call{Call: _e.mock.On("Delete", c, uname)}
}

func (_c *UserUsecase_Delete_Call) Run(run func(c context.Context, uname string)) *UserUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserUsecase_Delete_Call) Return(_a0 domain.RequestErr) *UserUsecase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_Delete_Call) RunAndReturn(run func(context.Context, string) domain.RequestErr) *UserUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: c
func (_m *UserUsecase) GetAll(c context.Context) ([]domain.User, domain.RequestErr) {
	ret := _m.Called(c)

	var r0 []domain.User
	var r1 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, domain.RequestErr)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) domain.RequestErr); ok {
		r1 = rf(c)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.RequestErr)
		}
	}

	return r0, r1
}

// UserUsecase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserUsecase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - c context.Context
func (_e *UserUsecase_Expecter) GetAll(c interface{}) *UserUsecase_GetAll_Call {
	return &UserUsecase_GetAll_Call{Call: _e.mock.On("GetAll", c)}
}

func (_c *UserUsecase_GetAll_Call) Run(run func(c context.Context)) *UserUsecase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserUsecase_GetAll_Call) Return(_a0 []domain.User, _a1 domain.RequestErr) *UserUsecase_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.User, domain.RequestErr)) *UserUsecase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: c, uname
func (_m *UserUsecase) GetByUsername(c context.Context, uname string) (domain.User, domain.RequestErr) {
	ret := _m.Called(c, uname)

	var r0 domain.User
	var r1 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, domain.RequestErr)); ok {
		return rf(c, uname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, uname)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.RequestErr); ok {
		r1 = rf(c, uname)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.RequestErr)
		}
	}

	return r0, r1
}

// UserUsecase_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type UserUsecase_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - c context.Context
//   - uname string
func (_e *UserUsecase_Expecter) GetByUsername(c interface{}, uname interface{}) *UserUsecase_GetByUsername_Call {
	return &UserUsecase_GetByUsername_Call{Call: _e.mock.On("GetByUsername", c, uname)}
}

func (_c *UserUsecase_GetByUsername_Call) Run(run func(c context.Context, uname string)) *UserUsecase_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserUsecase_GetByUsername_Call) Return(_a0 domain.User, _a1 domain.RequestErr) *UserUsecase_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (domain.User, domain.RequestErr)) *UserUsecase_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: c, uname, passwd
func (_m *UserUsecase) Login(c context.Context, uname string, passwd string) (domain.User, domain.RequestErr) {
	ret := _m.Called(c, uname, passwd)

	var r0 domain.User
	var r1 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.User, domain.RequestErr)); ok {
		return rf(c, uname, passwd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.User); ok {
		r0 = rf(c, uname, passwd)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) domain.RequestErr); ok {
		r1 = rf(c, uname, passwd)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.RequestErr)
		}
	}

	return r0, r1
}

// UserUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c context.Context
//   - uname string
//   - passwd string
func (_e *UserUsecase_Expecter) Login(c interface{}, uname interface{}, passwd interface{}) *UserUsecase_Login_Call {
	return &UserUsecase_Login_Call{Call: _e.mock.On("Login", c, uname, passwd)}
}

func (_c *UserUsecase_Login_Call) Run(run func(c context.Context, uname string, passwd string)) *UserUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserUsecase_Login_Call) Return(_a0 domain.User, _a1 domain.RequestErr) *UserUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserUsecase_Login_Call) RunAndReturn(run func(context.Context, string, string) (domain.User, domain.RequestErr)) *UserUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: c, u
func (_m *UserUsecase) Store(c context.Context, u *domain.User) domain.RequestErr {
	ret := _m.Called(c, u)

	var r0 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.RequestErr); ok {
		r0 = rf(c, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.RequestErr)
		}
	}

	return r0
}

// UserUsecase_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type UserUsecase_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - c context.Context
//   - u *domain.User
func (_e *UserUsecase_Expecter) Store(c interface{}, u interface{}) *UserUsecase_Store_Call {
	return &UserUsecase_Store_Call{Call: _e.mock.On("Store", c, u)}
}

func (_c *UserUsecase_Store_Call) Run(run func(c context.Context, u *domain.User)) *UserUsecase_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UserUsecase_Store_Call) Return(_a0 domain.RequestErr) *UserUsecase_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_Store_Call) RunAndReturn(run func(context.Context, *domain.User) domain.RequestErr) *UserUsecase_Store_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: c, uname, uUp
func (_m *UserUsecase) Update(c context.Context, uname string, uUp *domain.User) domain.RequestErr {
	ret := _m.Called(c, uname, uUp)

	var r0 domain.RequestErr
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) domain.RequestErr); ok {
		r0 = rf(c, uname, uUp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.RequestErr)
		}
	}

	return r0
}

// UserUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - c context.Context
//   - uname string
//   - uUp *domain.User
func (_e *UserUsecase_Expecter) Update(c interface{}, uname interface{}, uUp interface{}) *UserUsecase_Update_Call {
	return &UserUsecase_Update_Call{Call: _e.mock.On("Update", c, uname, uUp)}
}

func (_c *UserUsecase_Update_Call) Run(run func(c context.Context, uname string, uUp *domain.User)) *UserUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.User))
	})
	return _c
}

func (_c *UserUsecase_Update_Call) Return(_a0 domain.RequestErr) *UserUsecase_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecase_Update_Call) RunAndReturn(run func(context.Context, string, *domain.User) domain.RequestErr) *UserUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
